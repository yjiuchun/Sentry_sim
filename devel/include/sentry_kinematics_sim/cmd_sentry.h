// Generated by gencpp from file sentry_kinematics_sim/cmd_sentry.msg
// DO NOT EDIT!


#ifndef SENTRY_KINEMATICS_SIM_MESSAGE_CMD_SENTRY_H
#define SENTRY_KINEMATICS_SIM_MESSAGE_CMD_SENTRY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sentry_kinematics_sim
{
template <class ContainerAllocator>
struct cmd_sentry_
{
  typedef cmd_sentry_<ContainerAllocator> Type;

  cmd_sentry_()
    : vx(0.0)
    , vy(0.0)
    , wz(0.0)
    , yaw_add(0.0)
    , pitch_add(0.0)  {
    }
  cmd_sentry_(const ContainerAllocator& _alloc)
    : vx(0.0)
    , vy(0.0)
    , wz(0.0)
    , yaw_add(0.0)
    , pitch_add(0.0)  {
  (void)_alloc;
    }



   typedef float _vx_type;
  _vx_type vx;

   typedef float _vy_type;
  _vy_type vy;

   typedef float _wz_type;
  _wz_type wz;

   typedef float _yaw_add_type;
  _yaw_add_type yaw_add;

   typedef float _pitch_add_type;
  _pitch_add_type pitch_add;





  typedef boost::shared_ptr< ::sentry_kinematics_sim::cmd_sentry_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sentry_kinematics_sim::cmd_sentry_<ContainerAllocator> const> ConstPtr;

}; // struct cmd_sentry_

typedef ::sentry_kinematics_sim::cmd_sentry_<std::allocator<void> > cmd_sentry;

typedef boost::shared_ptr< ::sentry_kinematics_sim::cmd_sentry > cmd_sentryPtr;
typedef boost::shared_ptr< ::sentry_kinematics_sim::cmd_sentry const> cmd_sentryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sentry_kinematics_sim::cmd_sentry_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sentry_kinematics_sim::cmd_sentry_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sentry_kinematics_sim::cmd_sentry_<ContainerAllocator1> & lhs, const ::sentry_kinematics_sim::cmd_sentry_<ContainerAllocator2> & rhs)
{
  return lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.wz == rhs.wz &&
    lhs.yaw_add == rhs.yaw_add &&
    lhs.pitch_add == rhs.pitch_add;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sentry_kinematics_sim::cmd_sentry_<ContainerAllocator1> & lhs, const ::sentry_kinematics_sim::cmd_sentry_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sentry_kinematics_sim

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sentry_kinematics_sim::cmd_sentry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sentry_kinematics_sim::cmd_sentry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sentry_kinematics_sim::cmd_sentry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sentry_kinematics_sim::cmd_sentry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sentry_kinematics_sim::cmd_sentry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sentry_kinematics_sim::cmd_sentry_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sentry_kinematics_sim::cmd_sentry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "009b0f5c0eb3c6a488f257c56e4d4fe2";
  }

  static const char* value(const ::sentry_kinematics_sim::cmd_sentry_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x009b0f5c0eb3c6a4ULL;
  static const uint64_t static_value2 = 0x88f257c56e4d4fe2ULL;
};

template<class ContainerAllocator>
struct DataType< ::sentry_kinematics_sim::cmd_sentry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sentry_kinematics_sim/cmd_sentry";
  }

  static const char* value(const ::sentry_kinematics_sim::cmd_sentry_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sentry_kinematics_sim::cmd_sentry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 vx\n"
"float32 vy\n"
"float32 wz\n"
"float32 yaw_add\n"
"float32 pitch_add\n"
"\n"
;
  }

  static const char* value(const ::sentry_kinematics_sim::cmd_sentry_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sentry_kinematics_sim::cmd_sentry_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.wz);
      stream.next(m.yaw_add);
      stream.next(m.pitch_add);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cmd_sentry_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sentry_kinematics_sim::cmd_sentry_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sentry_kinematics_sim::cmd_sentry_<ContainerAllocator>& v)
  {
    s << indent << "vx: ";
    Printer<float>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<float>::stream(s, indent + "  ", v.vy);
    s << indent << "wz: ";
    Printer<float>::stream(s, indent + "  ", v.wz);
    s << indent << "yaw_add: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_add);
    s << indent << "pitch_add: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_add);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENTRY_KINEMATICS_SIM_MESSAGE_CMD_SENTRY_H
